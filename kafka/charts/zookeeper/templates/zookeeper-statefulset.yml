---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ template "zookeeper.fullname" . }}
  namespace: kafka
  labels:
    app: {{ template "zookeeper.name" . }}
    chart: {{ template "zookeeper.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ template "zookeeper.name" . }}
      release: {{ .Release.Name }}
  serviceName: {{ template "zookeeper.fullname" . }}-headless
  template:
    metadata:
      labels: 
        app: {{ template "zookeeper.name" . }}
        release: {{ .Release.Name }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ template "zookeeper.name" . }}
                  - key: "release"
                    operator: In
                    values:
                    - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      containers:
      - command:
        - "bash"
        - "-c"
        - |
          ZK_FIX_HOST_REGEX="s/${HOSTNAME}\.[^:]*:/0.0.0.0:/g"
          ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) \
          ZOOKEEPER_SERVERS=`echo $ZOOKEEPER_SERVERS | sed -e "$ZK_FIX_HOST_REGEX"` \
          /etc/confluent/docker/run
        env:
        - name : KAFKA_HEAP_OPTS
          value: "{{ .Values.heapOptions }}"
        - name : ZOOKEEPER_TICK_TIME
          value: "{{ .Values.tickTime }}"
        - name : ZOOKEEPER_SYNC_LIMIT
          value: "{{ .Values.syncLimit }}"
        - name : ZOOKEEPER_INIT_LIMIT
          value: "{{ .Values.initLimit }}"
        - name : ZOOKEEPER_MAX_CLIENT_CNXNS
          value: "{{ .Values.maxClientCnxns }}"
        - name : ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
          value: "{{ .Values.autoPurgeSnapRetainCount}}"
        - name : ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
          value: "{{ .Values.autoPurgePurgeInterval}}"
        - name: ZOOKEEPER_CLIENT_PORT
          value: "{{ .Values.ports.client }}"
        - name : ZOOKEEPER_SERVERS
          value: {{ template "zookeeper.serverlist" . }}
        # ZOOKEEPER_SERVER_ID is required just to pass cp-zookeeper ensure script for env check,
        # the value(metadata.mame) is not used and will be overwritten in command part
        - name: ZOOKEEPER_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: "{{ .Values.images.name }}:{{ .Values.images.tag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        name: {{ template "zookeeper.name" . }}-server
        ports:
        - containerPort: {{ .Values.ports.client }}
          name: client
          protocol: TCP
        - containerPort: {{ .Values.ports.election }}
          name: election
          protocol: TCP
        - containerPort: {{ .Values.ports.server }}
          name: server
          protocol: TCP
        resources:
{{ toYaml .Values.resources | indent 10 }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper/data
        - name: datalogdir
          mountPath: /var/lib/zookeeper/log
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      volumes:
      {{ if not .Values.persistence.enabled }}
      - name: datadir
        emptyDir: {}
      - name: datalogdir
        emptyDir: {}
      {{- end }}
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ .Values.persistence.dataDirSize }}"
      {{- if .Values.persistence.dataDirStorageClass }}
      {{- if (eq "-" .Values.persistence.dataDirStorageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.dataDirStorageClass }}"
      {{- end }}
      {{- end }}
  - metadata:
      name: datalogdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ .Values.persistence.dataLogDirSize }}"
      {{- if .Values.persistence.dataLogDirStorageClass }}
      {{- if (eq "-" .Values.persistence.dataLogDirStorageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.dataLogDirStorageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
