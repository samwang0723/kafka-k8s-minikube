#
# Kafka cluster deployment helm-chart values
#

## Enabling the external LoadBalancer
enableLoadBalancer: true

## The StatefulSet install 3 pods by default
replicas: 3

## Maximum history record for deployment
revisionHistoryLimit: 10

## Kafka image repository
images:
  broker: wurstmeister/kafka
  client: confluentinc/cp-kafka:4.1.2-2
  zookeeper: gcr.io/google_samples/k8szk:v3
  
## Specify a Zookeeper imagePullPolicy
## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
imagePullPolicy: IfNotPresent

## Configure resource requests and limits
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## Optional container security context
securityContext: {}

## StatefulSet update strategy
updateStrategy: RollingUpdate

## Start and stop pods in parallel or OrderedReady (one-by-one) - Cannot change after release
podManagementPolicy: OrderedReady

## Secrets passes to pods
secrets: 
- name: kafka-ssl
  mode: 420
  mountPath: /var/private/ssl
  readOnly: true

## Service account name
serviceAccountName: tiller

affinity: {}
nodeSelector: {}

## Readiness probe config
readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

## Node labels for pod assignment
nodeSelector: {}

## Period to wait for broker graceful shutdown (sigterm) before pod is killed (sigkill)
## ref: https://kubernetes-v1-4.github.io/docs/user-guide/production-pods/#lifecycle-hooks-and-termination-notice
## ref: https://kafka.apache.org/10/documentation.html#brokerconfigs controlled.shutdown.*
terminationGracePeriodSeconds: 60

## Tolerations for nodes that have taints on them.
## Useful if you want to dedicate nodes to just run kafka
## https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

externalIP: 192.168.0.111

## Service ports
ports:
  internal:
  - name: broker-internal
    port: 9092
    protocol: TCP
    targetPort: 9092
  external:
  - name: broker-external
    port: 9093
    protocol: TCP
    targetPort: 9093
  container:
  - containerPort: 9093
    name: external
  - containerPort: 9092
    name: internal

## Limits how many Kafka pods may be unavailable due to voluntary disruptions.
podDisruptionBudget:
  maxUnavailable: 1

## A collection of additional ports to expose on brokers (formatted as normal containerPort yaml)
# Useful when the image exposes metrics (like prometheus, etc.) through a javaagent instead of a sidecar
additionalPorts: 
  exposed: 9000

## Persistence configuration. Specify if and how to persist data to a persistent volume.
persistence:
  enabled: true

  ## The size of the PersistentVolume to allocate to each Kafka Pod in the StatefulSet. For
  ## production servers this number should likely be much larger.
  ##
  size: "1Gi"

  ## The location within the Kafka container where the PV will mount its storage and Kafka will
  ## store its logs.
  ##
  mountPath: "/opt/kafka/data"

env: 
- name: KAFKA_ZOOKEEPER_CONNECT
  value: "kafka-zookeeper:2181"
- name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
  value: "INTERNAL:PLAINTEXT,EXTERNAL:SSL"
- name: KAFKA_LISTENERS
  value: "INTERNAL://:9092,EXTERNAL://:9093"
- name: KAFKA_ADVERTISED_LISTENERS
  value: "INTERNAL://:9092,EXTERNAL://:9093"
- name: KAFKA_INTER_BROKER_LISTENER_NAME
  value: "INTERNAL"
- name: KAFKA_SSL_KEYSTORE_LOCATION
  value: "/var/private/ssl/kafka.server.keystore.jks"
- name: KAFKA_SSL_KEYSTORE_PASSWORD
  value: "test1234"
- name: KAFKA_SSL_TRUSTSTORE_LOCATION
  value: "/var/private/ssl/kafka.server.truststore.jks"
- name: KAFKA_SSL_TRUSTSTORE_PASSWORD
  value: "test1234"
- name: KAFKA_SSL_KEY_PASSWORD
  value: "test1234"
- name: KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
  value: ""
- name: KAFKA_SSL_CLIENT_AUTH
  value: "required"
- name: KAFKA_LOG_DIRS
  value: "/opt/kafka/data/logs"
- name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
  value: "3"
- name: KAFKA_HEAP_OPTS
  value: "-Xmx1G -Xms1G"
- name: KAFKA_PORT
  value: "9092"
- name: KAFKA_DEFAULT_PARTITIONS
  value: '1'
- name: KAFKA_DEFAULT_REPLICATION_FACTOR
  value: '3'
- name: KAFKA_MIN_INSYNC_REPLICAS
  value: '2'
- name: KAFKA_LOG4J_ROOT_LOGLEVEL
  value: DEBUG

## Topic creation and configuration.
## The job will be run on a deployment only when the config has been changed.
## - If 'partitions' and 'replicationFactor' are specified we create the topic (with --if-not-exists.)
## - If 'partitions', 'replicationFactor' and 'reassignPartitions' are specified we reassign the partitions to
## increase the replication factor of an existing topic.
## - If 'partitions' is specified we 'alter' the number of partitions. This will
## silently and safely fail if the new setting isnâ€™t strictly larger than the old (i.e. a NOOP.) Do be aware of the
## implications for keyed topics (ref: https://docs.confluent.io/current/kafka/post-deployment.html#admin-operations)
## - If 'defaultConfig' is specified it's deleted from the topic configuration. If it isn't present,
## it will silently and safely fail.
## - If 'config' is specified it's added to the topic configuration.
##
## Note: To increase the 'replicationFactor' of a topic, 'reassignPartitions' must be set to true (see above).
##
topics: []
  # - name: myExistingTopicConfig
  #   config: "cleanup.policy=compact,delete.retention.ms=604800000"
  # - name: myExistingTopicReassignPartitions
  #   partitions: 8
  #   replicationFactor: 5
  #   reassignPartitions: true
  # - name: myExistingTopicPartitions
  #   partitions: 8
  # - name: myNewTopicWithConfig
  #   partitions: 8
  #   replicationFactor: 3
  #   defaultConfig: "segment.bytes,segment.ms"
  #   config: "cleanup.policy=compact,delete.retention.ms=604800000"
  # - name: myAclTopicPartitions
  #   partitions: 8
  #   acls:
  #     - user: read
  #       operations: [ Read ]
  #     - user: read_and_write
  #       operations:
  #         - Read
  #         - Write
  #     - user: all
  #       operations: [ All ]

# ------------------------------------------------------------------------------
# Zookeeper:
# ------------------------------------------------------------------------------
zookeeper:
  ## If true, install the Zookeeper chart alongside Kafka
  ## ref: https://github.com/kubernetes/charts/tree/master/incubator/zookeeper
  enabled: true

  ## Configure Zookeeper resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources: {}

  ## Zookeeper launch command
  command:
  - /bin/bash
  - -xec
  - zkGenConfig.sh && exec zkServer.sh start-foreground

  ## Environmental variables to set in Zookeeper
  env:
  - name: ZK_REPLICAS
    value: "3"
  - name: JMXAUTH
    value: "false"
  - name: JMXDISABLE
    value: "true"
  - name: JMXPORT
    value: "1099"
  - name: JMXSSL
    value: "false"
  - name: ZK_CLIENT_PORT
    value: "2181"
  - name: ZK_ELECTION_PORT
    value: "3888"
  - name: ZK_HEAP_SIZE
    value: 1G
  - name: ZK_INIT_LIMIT
    value: "5"
  - name: ZK_LOG_LEVEL
    value: INFO
  - name: ZK_MAX_CLIENT_CNXNS
    value: "60"
  - name: ZK_MAX_SESSION_TIMEOUT
    value: "40000"
  - name: ZK_MIN_SESSION_TIMEOUT
    value: "4000"
  - name: ZK_PURGE_INTERVAL
    value: "0"
  - name: ZK_SERVER_PORT
    value: "2888"
  - name: ZK_SNAP_RETAIN_COUNT
    value: "3"
  - name: ZK_SYNC_LIMIT
    value: "10"
  - name: ZK_TICK_TIME
    value: "2000"

  ## Liveness detection entry point and criteria
  livenessProbe:
    exec:
      command:
      - zkOk.sh
    failureThreshold: 3
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  ## Readiness detection entry point and criteria
  readinessProbe:
    exec:
      command:
      - zkOk.sh
    failureThreshold: 3
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  ## If the Zookeeper Chart is disabled a URL and port are required to connect
  ports:
    client:
    - name: client
      port: 2181
      targetPort: 2181
      protocol: TCP
    election:
    - name: election
			port: 3888  # Port number for zookeeper container election port.
      targetPort: 3888
      protocol: TCP  # Protocol for zookeeper container election port.
    server:
    - name: server
			port: 2888  # Port number for zookeeper container server port.
      targetPort: 2888
      protocol: TCP  # Protocol for zookeeper container server port.

  ## Pod scheduling preferences (by default keep pods within a release on separate nodes).
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## By default we don't set affinity:
  affinity: {}  # Criteria by which pod label-values influence scheduling for zookeeper pods.
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - topologyKey: "kubernetes.io/hostname"
  #       labelSelector:
  #         matchLabels:
  #           release: zookeeper
  
  ## Optional container security context
  securityContext: 
    fsGroup: 1000
    runAsUser: 1000
